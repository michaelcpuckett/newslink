{"mappings":"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","sources":["packages/client/src/index.ts","packages/client/src/Header.ts","packages/client/src/SidebarNav.ts","packages/client/src/LoginForm.ts","packages/client/src/GenericForm.ts","packages/client/src/SignUpForm.ts","packages/client/src/CreatePostForm.ts","packages/client/src/EditProfileForm.ts"],"sourcesContent":["import './Header';\r\nimport './SidebarNav';\r\nimport './LoginForm';\r\nimport './SignUpForm';\r\nimport './CreatePostForm';\r\nimport './EditProfileForm';\r\n","export default class Header extends HTMLElement {\r\n  private menuToggleButtonElement: HTMLButtonElement;\r\n  private boundMenuToggleHandler: (event: MouseEvent) => void =\r\n    this.handleMenuToggle.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    if (!this.shadowRoot) {\r\n      throw new Error(\r\n        'This component must be initialized via declarative shadow DOM.',\r\n      );\r\n    }\r\n\r\n    this.menuToggleButtonElement =\r\n      this.shadowRoot.querySelector<HTMLButtonElement>('.menu-toggle-button');\r\n\r\n    if (!this.menuToggleButtonElement) {\r\n      throw new Error('Could not find required elements.');\r\n    }\r\n\r\n    this.initializeEventListeners();\r\n  }\r\n\r\n  initializeEventListeners() {\r\n    this.menuToggleButtonElement.addEventListener(\r\n      'click',\r\n      this.boundMenuToggleHandler,\r\n    );\r\n  }\r\n\r\n  handleMenuToggle(event: MouseEvent) {\r\n    event.preventDefault();\r\n    window.document.documentElement.dispatchEvent(\r\n      new CustomEvent('tl-header:toggle-menu'),\r\n    );\r\n  }\r\n}\r\n\r\ncustomElements.define('tl-header', Header);\r\n","export default class SidebarNav extends HTMLElement {\r\n  private dialogElement: HTMLDialogElement;\r\n  private closeButtonElement: HTMLButtonElement;\r\n\r\n  private boundDialogClickHandler = this.handleDialogClick.bind(this);\r\n  private boundDialogClosedHandler = this.handleDialogClosed.bind(this);\r\n  private boundToggleMenuHandler = this.handleToggleMenu.bind(this);\r\n  private boundCloseButtonClickHandler = this.handleCloseButtonClick.bind(this);\r\n  private boundMediaQueryChangeHandler = this.handleMediaQueryChange.bind(this);\r\n\r\n  private mediaQuery = window.matchMedia('(min-width: 1648px)');\r\n\r\n  static get observedAttributes() {\r\n    return ['is-open'];\r\n  }\r\n\r\n  private get isOpen() {\r\n    return this.hasAttribute('is-open');\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    if (!this.shadowRoot) {\r\n      throw new Error(\r\n        'This component must be initialized via declarative shadow DOM.',\r\n      );\r\n    }\r\n\r\n    this.dialogElement =\r\n      this.shadowRoot.querySelector<HTMLDialogElement>('dialog');\r\n\r\n    this.closeButtonElement =\r\n      this.shadowRoot.querySelector<HTMLButtonElement>('.close-button');\r\n\r\n    if (!this.closeButtonElement || !this.dialogElement) {\r\n      throw new Error('Could not find required elements.');\r\n    }\r\n\r\n    this.initializeEventListeners();\r\n    this.handleMediaQueryChange();\r\n  }\r\n\r\n  private initializeEventListeners() {\r\n    window.document.documentElement.addEventListener(\r\n      'tl-header:toggle-menu',\r\n      this.boundToggleMenuHandler,\r\n    );\r\n\r\n    this.closeButtonElement.addEventListener(\r\n      'click',\r\n      this.boundCloseButtonClickHandler,\r\n    );\r\n\r\n    this.dialogElement.addEventListener('click', this.boundDialogClickHandler);\r\n    this.dialogElement.addEventListener('close', this.boundDialogClosedHandler);\r\n\r\n    this.mediaQuery.addEventListener(\r\n      'change',\r\n      this.boundMediaQueryChangeHandler,\r\n    );\r\n  }\r\n\r\n  private handleToggleMenu() {\r\n    if (this.isOpen) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  private handleDialogClick(event: MouseEvent) {\r\n    if (event.target === event.currentTarget) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  private handleCloseButtonClick() {\r\n    this.close();\r\n  }\r\n\r\n  private handleDialogClosed() {\r\n    this.removeAttribute('is-open');\r\n  }\r\n\r\n  private open() {\r\n    if (this.dialogElement.open) {\r\n      this.dialogElement.close();\r\n    }\r\n\r\n    if (this.mediaQuery.matches) {\r\n      this.dialogElement.show();\r\n    } else {\r\n      this.dialogElement.showModal();\r\n    }\r\n  }\r\n\r\n  private close() {\r\n    if (!this.mediaQuery.matches) {\r\n      this.dialogElement.close();\r\n    }\r\n  }\r\n\r\n  private handleMediaQueryChange() {\r\n    if (this.mediaQuery.matches) {\r\n      this.open();\r\n    } else {\r\n      this.close();\r\n    }\r\n  }\r\n}\r\n\r\ncustomElements.define('tl-sidebar-nav', SidebarNav);\r\n","import GenericForm from './GenericForm';\r\n\r\nexport default class LoginForm extends GenericForm {\r\n  private usernameElement: HTMLInputElement;\r\n  private passwordElement: HTMLInputElement;\r\n\r\n  private boundSubmitHandler: (event: SubmitEvent) => void =\r\n    this.handleSubmit.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.usernameElement = this.shadowRoot.querySelector<HTMLInputElement>(\r\n      'input[name=\"username\"]',\r\n    );\r\n    this.passwordElement = this.shadowRoot.querySelector<HTMLInputElement>(\r\n      'input[name=\"password\"]',\r\n    );\r\n\r\n    if (!this.usernameElement || !this.passwordElement) {\r\n      throw new Error('Could not find required elements.');\r\n    }\r\n\r\n    this.initializeEventListeners();\r\n  }\r\n\r\n  initializeEventListeners() {\r\n    super.initializeEventListeners();\r\n    this.formElement.addEventListener('submit', this.boundSubmitHandler);\r\n  }\r\n\r\n  private handleSubmit(event: SubmitEvent) {\r\n    event.preventDefault();\r\n\r\n    if (!this.formElement.checkValidity()) {\r\n      return;\r\n    }\r\n\r\n    const { value: username } = this.usernameElement;\r\n    const { value: password } = this.passwordElement;\r\n\r\n    window\r\n      .fetch('/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          body: JSON.stringify({ username, password }),\r\n        },\r\n      })\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        console.log('Success:', result);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        // this.usernameElement.setCustomValidity('Password incorrect.');\r\n      });\r\n  }\r\n}\r\n\r\ncustomElements.define('tl-login-form', LoginForm);\r\n","export default class GenericForm extends HTMLElement {\r\n  protected formElement: HTMLFormElement;\r\n  protected inputElements: HTMLInputElement[];\r\n  protected textareaElements: HTMLTextAreaElement[];\r\n  protected selectElements: HTMLSelectElement[];\r\n  protected formActionUrl: URL | null = null;\r\n\r\n  protected boundInvalidHandler: (event: Event) => void =\r\n    this.handleInvalid.bind(this);\r\n\r\n  protected boundInputHandler: (event: InputEvent) => void =\r\n    this.handleInput.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    if (!this.shadowRoot) {\r\n      throw new Error(\r\n        'This component must be initialized via declarative shadow DOM.',\r\n      );\r\n    }\r\n\r\n    this.formElement = this.shadowRoot.querySelector<HTMLFormElement>('form');\r\n\r\n    if (!this.formElement) {\r\n      throw new Error('Could not find required elements.');\r\n    }\r\n\r\n    this.formActionUrl = this.formElement.action\r\n      ? new URL(this.formElement.action)\r\n      : null;\r\n\r\n    this.inputElements = Array.from(\r\n      this.formElement.querySelectorAll<HTMLInputElement>('input'),\r\n    );\r\n\r\n    this.textareaElements = Array.from(\r\n      this.formElement.querySelectorAll<HTMLTextAreaElement>('textarea'),\r\n    );\r\n\r\n    this.selectElements = Array.from(\r\n      this.formElement.querySelectorAll<HTMLSelectElement>('select'),\r\n    );\r\n\r\n    this.initializeEventListeners();\r\n  }\r\n\r\n  protected get elements() {\r\n    return [...this.inputElements, ...this.textareaElements];\r\n  }\r\n\r\n  protected initializeEventListeners() {\r\n    for (const element of this.elements) {\r\n      element.addEventListener('invalid', this.boundInvalidHandler);\r\n      element.addEventListener('input', this.boundInputHandler);\r\n    }\r\n  }\r\n\r\n  protected handleInvalid(event: Event) {\r\n    event.preventDefault();\r\n\r\n    const { currentTarget: element } = event;\r\n\r\n    if (\r\n      !(element instanceof HTMLInputElement) &&\r\n      !(element instanceof HTMLTextAreaElement)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const parentLabel = element.closest('label');\r\n\r\n    if (!(parentLabel instanceof HTMLLabelElement)) {\r\n      return;\r\n    }\r\n\r\n    element.setAttribute('aria-invalid', 'true');\r\n    parentLabel.classList.add('is-invalid');\r\n    parentLabel.querySelector('.error-message').textContent =\r\n      element.validationMessage;\r\n  }\r\n\r\n  protected handleInput(event: InputEvent) {\r\n    const { currentTarget: element } = event;\r\n\r\n    if (\r\n      !(element instanceof HTMLInputElement) &&\r\n      !(element instanceof HTMLTextAreaElement)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const parentLabel = element.closest('label');\r\n\r\n    if (!(parentLabel instanceof HTMLLabelElement)) {\r\n      return;\r\n    }\r\n\r\n    element.setAttribute('aria-invalid', 'false');\r\n    parentLabel.classList.remove('is-invalid');\r\n    parentLabel.querySelector('.error-message').textContent = '';\r\n  }\r\n}\r\n","import GenericForm from './GenericForm';\r\n\r\nexport default class LoginForm extends GenericForm {\r\n  private typeElement: HTMLSelectElement;\r\n  private nameElement: HTMLInputElement;\r\n  private emailElement: HTMLInputElement;\r\n  private usernameElement: HTMLInputElement;\r\n  private passwordElement: HTMLInputElement;\r\n  private repeatPasswordElement: HTMLInputElement;\r\n\r\n  private boundSubmitHandler: (event: SubmitEvent) => void =\r\n    this.handleSubmit.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.typeElement = this.selectElements.find((selectElement) =>\r\n      selectElement.matches('[name=\"type\"]'),\r\n    );\r\n\r\n    this.emailElement = this.inputElements.find((inputElement) =>\r\n      inputElement.matches('[name=\"email\"]'),\r\n    );\r\n\r\n    this.usernameElement = this.inputElements.find((inputElement) =>\r\n      inputElement.matches('[name=\"username\"]'),\r\n    );\r\n\r\n    this.passwordElement = this.inputElements.find((inputElement) =>\r\n      inputElement.matches('[name=\"password\"]'),\r\n    );\r\n\r\n    this.repeatPasswordElement = this.inputElements.find((inputElement) =>\r\n      inputElement.matches('[name=\"repeat-password\"]'),\r\n    );\r\n\r\n    if (\r\n      !this.typeElement ||\r\n      !this.nameElement ||\r\n      !this.emailElement ||\r\n      !this.usernameElement ||\r\n      !this.passwordElement ||\r\n      !this.repeatPasswordElement\r\n    ) {\r\n      throw new Error('Could not find required elements.');\r\n    }\r\n\r\n    this.initializeEventListeners();\r\n  }\r\n\r\n  initializeEventListeners() {\r\n    super.initializeEventListeners();\r\n    this.formElement.addEventListener('submit', this.boundSubmitHandler);\r\n  }\r\n\r\n  private handleSubmit(event: SubmitEvent) {\r\n    event.preventDefault();\r\n\r\n    if (!this.formElement.checkValidity()) {\r\n      return;\r\n    }\r\n\r\n    const { value: type } = this.typeElement;\r\n    const { value: name } = this.nameElement;\r\n    const { value: email } = this.emailElement;\r\n    const { value: username } = this.usernameElement;\r\n    const { value: password } = this.passwordElement;\r\n    const { value: repeatPassword } = this.repeatPasswordElement;\r\n\r\n    if (password !== repeatPassword) {\r\n      this.repeatPasswordElement.setCustomValidity('Passwords do not match.');\r\n      this.repeatPasswordElement.reportValidity();\r\n      return;\r\n    }\r\n\r\n    window\r\n      .fetch('/user', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/activity+json',\r\n        },\r\n        body: JSON.stringify({\r\n          type,\r\n          name,\r\n          preferredUsername: username,\r\n          email,\r\n          password,\r\n        }),\r\n      })\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result.error) {\r\n          throw new Error(result.error);\r\n        }\r\n\r\n        window.document.cookie = `__session=${result.token}; path=/`;\r\n        window.location.reload();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        // this.usernameElement.setCustomValidity('Password incorrect.');\r\n      });\r\n  }\r\n}\r\n\r\ncustomElements.define('tl-sign-up-form', LoginForm);\r\n","import GenericForm from './GenericForm';\r\n\r\nexport default class CreatePostForm extends GenericForm {\r\n  private typeElement: HTMLSelectElement;\r\n  private contentElement: HTMLTextAreaElement;\r\n\r\n  private boundSubmitHandler: (event: SubmitEvent) => void =\r\n    this.handleSubmit.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    if (!this.formActionUrl) {\r\n      throw new Error('Could not find form action.');\r\n    }\r\n\r\n    const typeElement = this.selectElements.find((selectElement) =>\r\n      selectElement.matches('[name=\"type\"]'),\r\n    );\r\n\r\n    const contentElement = this.textareaElements.find((textareaElement) =>\r\n      textareaElement.matches('[name=\"content\"]'),\r\n    );\r\n\r\n    if (!typeElement || !contentElement) {\r\n      throw new Error('Could not find required elements.');\r\n    }\r\n\r\n    this.typeElement = typeElement;\r\n    this.contentElement = contentElement;\r\n\r\n    this.initializeEventListeners();\r\n  }\r\n\r\n  initializeEventListeners() {\r\n    super.initializeEventListeners();\r\n    this.formElement.addEventListener('submit', this.boundSubmitHandler);\r\n  }\r\n\r\n  private handleSubmit(event: SubmitEvent) {\r\n    event.preventDefault();\r\n\r\n    if (!this.formElement.checkValidity()) {\r\n      return;\r\n    }\r\n\r\n    const { value: type } = this.typeElement;\r\n    const { value: content } = this.contentElement;\r\n\r\n    window\r\n      .fetch(this.formActionUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/activity+json',\r\n        },\r\n        body: JSON.stringify({\r\n          '@context': 'https://www.w3.org/ns/activitystreams',\r\n          type,\r\n          content,\r\n        }),\r\n      })\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        console.log('Success:', result);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        // this.usernameElement.setCustomValidity('Password incorrect.');\r\n      });\r\n  }\r\n}\r\n\r\ncustomElements.define('tl-create-post-form', CreatePostForm);\r\n","import GenericForm from './GenericForm';\r\n\r\nexport default class EditProfileForm extends GenericForm {\r\n  private displayNameElement: HTMLInputElement;\r\n  private bioElement: HTMLTextAreaElement;\r\n  private boundSubmitHandler: (event: SubmitEvent) => void =\r\n    this.handleSubmit.bind(this);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.displayNameElement =\r\n      this.shadowRoot.querySelector<HTMLInputElement>('input[name=\"name\"]');\r\n    this.bioElement = this.shadowRoot.querySelector<HTMLTextAreaElement>(\r\n      'textarea[name=\"summary\"]',\r\n    );\r\n\r\n    if (!this.displayNameElement || !this.bioElement) {\r\n      throw new Error('Could not find required elements.');\r\n    }\r\n\r\n    this.initializeEventListeners();\r\n  }\r\n\r\n  initializeEventListeners() {\r\n    super.initializeEventListeners();\r\n    this.formElement.addEventListener('submit', this.boundSubmitHandler);\r\n  }\r\n\r\n  private handleSubmit(event: SubmitEvent) {\r\n    event.preventDefault();\r\n\r\n    if (!this.formElement.checkValidity()) {\r\n      return;\r\n    }\r\n\r\n    const { value: name } = this.displayNameElement;\r\n    const { value: summary } = this.bioElement;\r\n\r\n    window\r\n      .fetch('/edit-profile', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          body: JSON.stringify({ name, summary }),\r\n        },\r\n      })\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        console.log('Success:', result);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        // this.usernameElement.setCustomValidity('Password incorrect.');\r\n      });\r\n  }\r\n}\r\n\r\ncustomElements.define('tl-edit-profile-form', EditProfileForm);\r\n"],"names":[],"version":3,"file":"index.js.map"}